@page "/stockdetails/{symbol}"
@using System.Net.Http.Json
@using MudBlazor
@using AspireBorsa.Web;
@using AspireBorsa.Web.Model;
@inject HttpClient httpClient
@inject NavigationManager Navigation

<PageTitle>Stock Details</PageTitle>

<div>
    <style>
        .y-axs{
            width:100%!important;
        }


    </style>
    <MudChart @ref="Chart" ChartType="ChartType.Line" ChartSeries="@_series" Class="y-axs" ChartOptions="@_options" Width="100%" Height="750px"></MudChart>
@*     <MudSlider @bind-Value="_options.YAxisTicks" Min="10" Max="400" Step="10" Color="Color.Info">Y-Axis Ticks: @_options.YAxisTicks.ToString()</MudSlider> *@
</div>

<MudDataGrid Items="@stockDetails" Class="zebra-table">
    <Columns>
        <PropertyColumn Property="x => x.Symbol" Title="Menkul" />
        <PropertyColumn Property="x => x.BuyPrice" Title="Alış" />
        <PropertyColumn Property="x => x.SellPrice" Title="Satış" />
        <PropertyColumn Property="x => x.HighPrice" Title="Yüksek" />
        <PropertyColumn Property="x => x.LowPrice" Title="Düşük" />
        <PropertyColumn Property="x => x.AveragePrice" Title="Ortalama Fiyat" />
        <PropertyColumn Property="x => x.PercentageChange" Title="%" />
        <PropertyColumn Property="x => x.VolumeLot" Title="Hacim (Lot)" />
        <PropertyColumn Property="x => x.VolumeTL" Title="Hacim (TL)" />
        <PropertyColumn Property="x => x.LastTransactionTime" Title="Son İşlem" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ViewStock" />  
    </PagerContent>
</MudDataGrid>


@code {
    [Parameter]
    public string Symbol { get; set; }
    private List<ViewStock> stockDetails = new List<ViewStock>();
    MudChart Chart { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            stockDetails = await httpClient.GetFromJsonAsync<List<ViewStock>>($"https://localhost:7375/api/Stock/GetStocksWithId?symbol={Symbol}");
            if (Chart != null)
            {
                var date1 = stockDetails.Select(_ => _.LastTransactionTime).Min();
                var date2 = stockDetails.Select(_ => _.LastTransactionTime).Max();
                var dates = stockDetails.Where(_ => _.LastTransactionTime > date1 && _.LastTransactionTime < date2).Take(2).Select(_ => new string(_.LastTransactionTime.ToString("MM-dd"))).ToArray();
                List<string> dateVals = new List<string>(); 
                dateVals.Add(date1.ToString("MM-dd"));
                dateVals.AddRange(dates);
                dateVals.Add(date2.ToString("MM-dd"));
                    
                _options.LineStrokeWidth = 2;
                // _options.XAxisLines = true;              // Grafiğe yukarıdan aşağı çizgiler.
                _options.YAxisLines = true;
                _options.ShowLegend = true;
                
                _series.Add(new ChartSeries { Name = $"{Symbol}", Data = stockDetails.Select(_ => _.LastPrice).ToArray() });
                
                Chart.XAxisLabels = dateVals.ToArray(); 
                
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching stock details: {ex.Message}");
        }
    }


    private readonly List<ChartSeries> _series = new();
    private readonly ChartOptions _options = new();
    private List<string> _xAxisLabels = new List<string>{ "2023-07-20", "2023-04-21", "2023-04-22", "2023-04-23", "2023-04-24", "2023-04-25", "2023-04-26" };
}

<style>

    .zebra-table .mud-table-row:nth-child(odd) {
        background-color: #ffffff; /* Beyaz */
    }

    .zebra-table .mud-table-row:nth-child(even) {
        background-color: #f9f9f9; /* Gri */
    }

    /* .mud-chart-x-axis-labels text {
        text-anchor: middle;
        dominant-baseline: middle;
    } */

</style>